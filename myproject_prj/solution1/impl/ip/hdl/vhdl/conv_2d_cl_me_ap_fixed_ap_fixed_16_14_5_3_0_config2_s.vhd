-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_TVALID : OUT STD_LOGIC;
    res_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_F : STD_LOGIC_VECTOR (10 downto 0) := "00000001111";
    constant ap_const_lv32_47F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001111111";
    constant ap_const_lv11_47F : STD_LOGIC_VECTOR (10 downto 0) := "10001111111";
    constant ap_const_lv1152_lc_2 : STD_LOGIC_VECTOR (1151 downto
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_in_V : STD_LOGIC_VECTOR (1151 downto
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (114 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln167_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal res_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln176_2_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_22_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_21_reg_220 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_20_reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_17_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_16_reg_285 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_15_reg_298 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_311 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_res_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_reg_877 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_8_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_887 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_10_reg_892 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_11_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_12_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_13_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_return : STD_LOGIC_VECTOR (1151 downto 0);
    signal call_ret_reg_912 : STD_LOGIC_VECTOR (1151 downto 0);
    signal sX_load_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln176_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_load_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln176_1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_load_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_load_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln176_2_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln74_reg_954_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_539_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln83_fu_647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln83_reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_0_V_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_reg_985 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_reg_995 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_reg_1005 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_2_0_7_reg_1015 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_V_fu_742_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal acc_1_V_fu_747_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_767_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_772_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_777_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_start : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_done : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_idle : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_ready : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_data_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_ap_ready : STD_LOGIC;
    signal tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_ap_ready : STD_LOGIC;
    signal tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_ap_ready : STD_LOGIC;
    signal tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_ap_ready : STD_LOGIC;
    signal tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_ap_ready : STD_LOGIC;
    signal tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_ap_ready : STD_LOGIC;
    signal tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_ap_ready : STD_LOGIC;
    signal tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_ap_ready : STD_LOGIC;
    signal op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal select_ln208_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_phi_fu_325_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln198_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln83_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln213_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln206_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln211_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_479_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_499_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln176_2_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_3_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln176_1_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln176_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_545_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_21_fu_553_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln83_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln83_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln83_2_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_565_p4 : STD_LOGIC_VECTOR (1151 downto 0);
    signal sub_ln83_1_fu_580_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_fu_592_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_2_fu_607_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln83_3_fu_615_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_1_fu_600_p3 : STD_LOGIC_VECTOR (1151 downto 0);
    signal zext_ln83_2_fu_621_p1 : STD_LOGIC_VECTOR (1151 downto 0);
    signal zext_ln83_3_fu_625_p1 : STD_LOGIC_VECTOR (1151 downto 0);
    signal lshr_ln83_fu_629_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal lshr_ln83_1_fu_635_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal and_ln83_fu_641_p2 : STD_LOGIC_VECTOR (1151 downto 0);
    signal tmp_2_fu_727_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln213_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_V_TVALID_int : STD_LOGIC;
    signal res_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_V_U_vld_out : STD_LOGIC;
    signal ap_condition_419 : BOOLEAN;

    component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        output_V_read : IN STD_LOGIC_VECTOR (1151 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1151 downto 0) );
    end component;


    component product_dense_ap_fixed_ap_fixed_ap_fixed_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (15 downto 0);
        w_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (114 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    w2_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_w2_V
    generic map (
        DataWidth => 115,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332 : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_start,
        ap_done => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_done,
        ap_idle => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_idle,
        ap_ready => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_ready,
        data_V_read => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_data_V_read,
        output_V_read => layer_in_V,
        ap_return => call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_return);

    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_w_V,
        ap_return => tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_ap_return);

    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_w_V,
        ap_return => tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_ap_return);

    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_w_V,
        ap_return => tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_ap_return);

    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_w_V,
        ap_return => tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_ap_return);

    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_w_V,
        ap_return => tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_ap_return);

    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_w_V,
        ap_return => tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_ap_return);

    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_w_V,
        ap_return => tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_ap_return);

    op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_ap_ready,
        a_V => trunc_ln83_reg_963,
        w_V => op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_w_V,
        ap_return => op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_ap_return);

    regslice_both_res_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_V_V_TDATA_int,
        vld_in => res_V_V_TVALID_int,
        ack_in => res_V_V_TREADY_int,
        data_out => res_V_V_TDATA,
        vld_out => regslice_both_res_V_V_U_vld_out,
        ack_out => res_V_V_TREADY,
        apdone_blk => regslice_both_res_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_i_reg_196 <= i_reg_872;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    in_index_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_533_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_index_reg_311 <= ir_fu_539_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                in_index_reg_311 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                if ((icmp_ln198_fu_782_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln198_fu_782_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln211_fu_787_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_419)) then
                if ((icmp_ln202_fu_828_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln202_fu_828_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln206_fu_833_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                if ((icmp_ln198_fu_782_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln198_fu_782_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln213_fu_803_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp_V_15_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_15_reg_298 <= acc_0_V_fu_742_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_15_reg_298 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_16_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_16_reg_285 <= acc_1_V_fu_747_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_16_reg_285 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_17_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_17_reg_272 <= acc_2_V_fu_752_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_17_reg_272 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_18_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_18_reg_259 <= acc_3_V_fu_757_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_18_reg_259 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_19_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_19_reg_246 <= acc_4_V_fu_762_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_19_reg_246 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_20_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_20_reg_233 <= acc_5_V_fu_767_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_20_reg_233 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_21_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_21_reg_220 <= acc_6_V_fu_772_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_21_reg_220 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_V_22_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_V_22_reg_207 <= acc_7_V_fu_777_p2;
            elsif (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then 
                tmp_V_22_reg_207 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                and_ln176_2_reg_950 <= and_ln176_2_fu_527_p2;
                call_ret_reg_912 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_return;
                icmp_ln176_1_reg_933 <= icmp_ln176_1_fu_469_p2;
                icmp_ln176_reg_923 <= icmp_ln176_fu_459_p2;
                layer_in_V <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_return;
                pX_load_reg_944 <= pX;
                pY_load_reg_938 <= pY;
                sX_load_reg_918 <= sX;
                sY_load_reg_928 <= sY;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_872 <= i_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln74_reg_954 <= icmp_ln74_fu_533_p2;
                icmp_ln74_reg_954_pp0_iter1_reg <= icmp_ln74_reg_954;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_reg_954 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                op_V_assign_2_0_7_reg_1015 <= op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_ap_return;
                tmpmult_0_V_reg_980 <= tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_ap_return;
                tmpmult_1_V_reg_985 <= tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_ap_return;
                tmpmult_2_V_reg_990 <= tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_ap_return;
                tmpmult_3_V_reg_995 <= tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_ap_return;
                tmpmult_4_V_reg_1000 <= tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_ap_return;
                tmpmult_5_V_reg_1005 <= tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_ap_return;
                tmpmult_6_V_reg_1010 <= tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln198_fu_782_p2 = ap_const_lv1_1))) then
                sY <= ap_phi_mux_storemerge_i_phi_fu_325_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_V_10_reg_892 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_11_reg_897 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_V_12_reg_902 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_V_13_reg_907 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_8_reg_882 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_9_reg_887 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_reg_877 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_533_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln83_reg_963 <= trunc_ln83_fu_647_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln167_fu_418_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, regslice_both_res_V_V_U_apdone_blk, and_ln176_2_fu_527_p2, icmp_ln74_fu_533_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_state21_io, res_V_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln176_2_fu_527_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_lv1_0 = and_ln176_2_fu_527_p2) and (data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln74_fu_533_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln74_fu_533_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_0_V_fu_742_p2 <= std_logic_vector(unsigned(tmpmult_0_V_reg_980) + unsigned(tmp_V_15_reg_298));
    acc_1_V_fu_747_p2 <= std_logic_vector(unsigned(tmpmult_1_V_reg_985) + unsigned(tmp_V_16_reg_285));
    acc_2_V_fu_752_p2 <= std_logic_vector(unsigned(tmpmult_2_V_reg_990) + unsigned(tmp_V_17_reg_272));
    acc_3_V_fu_757_p2 <= std_logic_vector(unsigned(tmpmult_3_V_reg_995) + unsigned(tmp_V_18_reg_259));
    acc_4_V_fu_762_p2 <= std_logic_vector(unsigned(tmpmult_4_V_reg_1000) + unsigned(tmp_V_19_reg_246));
    acc_5_V_fu_767_p2 <= std_logic_vector(unsigned(tmpmult_5_V_reg_1005) + unsigned(tmp_V_20_reg_233));
    acc_6_V_fu_772_p2 <= std_logic_vector(unsigned(tmpmult_6_V_reg_1010) + unsigned(tmp_V_21_reg_220));
    acc_7_V_fu_777_p2 <= std_logic_vector(unsigned(op_V_assign_2_0_7_reg_1015) + unsigned(tmp_V_22_reg_207));
    add_ln206_fu_833_p2 <= std_logic_vector(unsigned(pY_load_reg_938) + unsigned(ap_const_lv32_1));
    add_ln208_fu_844_p2 <= std_logic_vector(unsigned(sY_load_reg_928) + unsigned(ap_const_lv32_1));
    add_ln211_fu_787_p2 <= std_logic_vector(unsigned(pX_load_reg_944) + unsigned(ap_const_lv32_1));
    add_ln213_fu_798_p2 <= std_logic_vector(unsigned(sX_load_reg_918) + unsigned(ap_const_lv32_1));
    and_ln176_1_fu_521_p2 <= (icmp_ln176_3_fu_509_p2 and icmp_ln176_2_fu_489_p2);
    and_ln176_2_fu_527_p2 <= (and_ln176_fu_515_p2 and and_ln176_1_fu_521_p2);
    and_ln176_fu_515_p2 <= (icmp_ln176_fu_459_p2 and icmp_ln176_1_fu_469_p2);
    and_ln83_fu_641_p2 <= (lshr_ln83_fu_629_p2 and lshr_ln83_1_fu_635_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(data_V_V_empty_n, icmp_ln167_fu_418_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
                ap_block_state2 <= ((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state21_io_assign_proc : process(and_ln176_2_reg_950, res_V_V_TREADY_int)
    begin
                ap_block_state21_io <= ((res_V_V_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln176_2_reg_950));
    end process;


    ap_condition_419_assign_proc : process(ap_CS_fsm_state21, ap_block_state21_io, icmp_ln198_fu_782_p2)
    begin
                ap_condition_419 <= ((ap_const_boolean_0 = ap_block_state21_io) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln198_fu_782_p2 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln74_fu_533_p2)
    begin
        if ((icmp_ln74_fu_533_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln167_fu_418_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_phi_fu_325_p4_assign_proc : process(ap_CS_fsm_state21, select_ln208_fu_849_p3, icmp_ln198_fu_782_p2, icmp_ln202_fu_828_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln198_fu_782_p2 = ap_const_lv1_1))) then
            if ((icmp_ln202_fu_828_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_phi_fu_325_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln202_fu_828_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_phi_fu_325_p4 <= select_ln208_fu_849_p3;
            else 
                ap_phi_mux_storemerge_i_phi_fu_325_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_i_phi_fu_325_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln167_fu_418_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_start_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state9)
    begin
        if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_start <= ap_const_logic_1;
        else 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_332_data_V_read <= (((((((data_V_V_dout & tmp_V_13_reg_907) & tmp_V_12_reg_902) & tmp_V_11_reg_897) & tmp_V_10_reg_892) & tmp_V_9_reg_887) & tmp_V_8_reg_882) & tmp_V_reg_877);

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln167_fu_418_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln167_fu_418_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, regslice_both_res_V_V_U_apdone_blk)
    begin
        if ((((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln167_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_553_p2 <= (tmp_1_fu_545_p3 or ap_const_lv11_F);
    i_fu_424_p2 <= std_logic_vector(unsigned(i_0_i_reg_196) + unsigned(ap_const_lv5_1));
    icmp_ln167_fu_418_p2 <= "1" when (i_0_i_reg_196 = ap_const_lv5_19) else "0";
    icmp_ln176_1_fu_469_p2 <= "1" when (sY = ap_const_lv32_2) else "0";
    icmp_ln176_2_fu_489_p2 <= "1" when (signed(tmp_3_fu_479_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln176_3_fu_509_p2 <= "1" when (signed(tmp_4_fu_499_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln176_fu_459_p2 <= "1" when (sX = ap_const_lv32_2) else "0";
    icmp_ln198_fu_782_p2 <= "1" when (pX_load_reg_944 = ap_const_lv32_4) else "0";
    icmp_ln202_fu_828_p2 <= "1" when (pY_load_reg_938 = ap_const_lv32_4) else "0";
    icmp_ln74_fu_533_p2 <= "1" when (in_index_reg_311 = ap_const_lv7_48) else "0";
    icmp_ln83_fu_559_p2 <= "1" when (unsigned(tmp_1_fu_545_p3) > unsigned(empty_21_fu_553_p2)) else "0";
    ir_fu_539_p2 <= std_logic_vector(unsigned(in_index_reg_311) + unsigned(ap_const_lv7_1));
    lshr_ln83_1_fu_635_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1152_lc_2),to_integer(unsigned('0' & zext_ln83_3_fu_625_p1(31-1 downto 0)))));
    lshr_ln83_fu_629_p2 <= std_logic_vector(shift_right(unsigned(select_ln83_1_fu_600_p3),to_integer(unsigned('0' & zext_ln83_2_fu_621_p1(31-1 downto 0)))));
    op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_412_w_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_727_p4),16));

    res_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, and_ln176_2_reg_950, res_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln176_2_reg_950)))) then 
            res_V_V_TDATA_blk_n <= res_V_V_TREADY_int;
        else 
            res_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_V_TDATA_int_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, tmp_V_22_reg_207, tmp_V_21_reg_220, tmp_V_20_reg_233, tmp_V_19_reg_246, tmp_V_18_reg_259, tmp_V_17_reg_272, tmp_V_16_reg_285, tmp_V_15_reg_298)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            res_V_V_TDATA_int <= tmp_V_22_reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            res_V_V_TDATA_int <= tmp_V_21_reg_220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_V_V_TDATA_int <= tmp_V_20_reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_V_V_TDATA_int <= tmp_V_19_reg_246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            res_V_V_TDATA_int <= tmp_V_18_reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            res_V_V_TDATA_int <= tmp_V_17_reg_272;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_V_V_TDATA_int <= tmp_V_16_reg_285;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            res_V_V_TDATA_int <= tmp_V_15_reg_298;
        else 
            res_V_V_TDATA_int <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_V_V_TVALID <= regslice_both_res_V_V_U_vld_out;

    res_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, res_V_V_TREADY_int)
    begin
        if ((((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((res_V_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            res_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln208_fu_849_p3 <= 
        ap_const_lv32_2 when (icmp_ln176_1_reg_933(0) = '1') else 
        add_ln208_fu_844_p2;
    select_ln213_fu_803_p3 <= 
        ap_const_lv32_2 when (icmp_ln176_reg_923(0) = '1') else 
        add_ln213_fu_798_p2;
    select_ln83_1_fu_600_p3 <= 
        tmp_10_fu_565_p4 when (icmp_ln83_fu_559_p2(0) = '1') else 
        call_ret_reg_912;
    select_ln83_2_fu_607_p3 <= 
        sub_ln83_1_fu_580_p2 when (icmp_ln83_fu_559_p2(0) = '1') else 
        tmp_1_fu_545_p3;
    select_ln83_fu_592_p3 <= 
        sub_ln83_fu_574_p2 when (icmp_ln83_fu_559_p2(0) = '1') else 
        sub_ln83_2_fu_586_p2;
    sub_ln83_1_fu_580_p2 <= std_logic_vector(signed(ap_const_lv11_47F) - signed(tmp_1_fu_545_p3));
    sub_ln83_2_fu_586_p2 <= std_logic_vector(unsigned(empty_21_fu_553_p2) - unsigned(tmp_1_fu_545_p3));
    sub_ln83_3_fu_615_p2 <= std_logic_vector(signed(ap_const_lv11_47F) - signed(select_ln83_fu_592_p3));
    sub_ln83_fu_574_p2 <= std_logic_vector(unsigned(tmp_1_fu_545_p3) - unsigned(empty_21_fu_553_p2));
    
    tmp_10_fu_565_p4_proc : process(call_ret_reg_912)
    variable vlo_cpy : STD_LOGIC_VECTOR(1152+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1152+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable tmp_10_fu_565_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1152 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(11 - 1 downto 0) := ap_const_lv32_47F(11 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(11 - 1 downto 0) := ap_const_lv32_0(11 - 1 downto 0);
        v0_cpy := call_ret_reg_912;
        if (vlo_cpy(11 - 1 downto 0) > vhi_cpy(11 - 1 downto 0)) then
            vhi_cpy(11-1 downto 0) := std_logic_vector(1152-1-unsigned(ap_const_lv32_0(11-1 downto 0)));
            vlo_cpy(11-1 downto 0) := std_logic_vector(1152-1-unsigned(ap_const_lv32_47F(11-1 downto 0)));
            for tmp_10_fu_565_p4_i in 0 to 1152-1 loop
                v0_cpy(tmp_10_fu_565_p4_i) := call_ret_reg_912(1152-1-tmp_10_fu_565_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(11-1 downto 0)))));

        section := (others=>'0');
        section(11-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(11-1 downto 0)) - unsigned(vlo_cpy(11-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1152-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_565_p4 <= resvalue(1152-1 downto 0);
    end process;

    tmp_1_fu_545_p3 <= (in_index_reg_311 & ap_const_lv4_0);
    tmp_2_fu_727_p4 <= w2_V_q0(114 downto 112);
    tmp_3_fu_479_p4 <= pY(31 downto 1);
    tmp_4_fu_499_p4 <= pX(31 downto 1);
    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_370_w_V <= w2_V_q0(16 - 1 downto 0);
    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_376_w_V <= w2_V_q0(31 downto 16);
    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_382_w_V <= w2_V_q0(47 downto 32);
    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_388_w_V <= w2_V_q0(63 downto 48);
    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_394_w_V <= w2_V_q0(79 downto 64);
    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_400_w_V <= w2_V_q0(95 downto 80);
    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_406_w_V <= w2_V_q0(111 downto 96);
    trunc_ln83_fu_647_p1 <= and_ln83_fu_641_p2(16 - 1 downto 0);
    w2_V_address0 <= zext_ln83_fu_651_p1(7 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln83_2_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_fu_607_p3),1152));
    zext_ln83_3_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln83_3_fu_615_p2),1152));
    zext_ln83_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_311),64));
end behav;
